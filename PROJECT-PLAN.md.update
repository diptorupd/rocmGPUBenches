### ✅ COMPLETED (Merged to main - Oct 16, 2025)

#### Phase 1-5: Foundation, Framework & Storage (Previous work)
[Previous content unchanged - Phase 1-4 and Phase 5 details remain the same]

#### Phase 6: Storage Module ✅ (Oct 16, 2025)
- [x] **TODO 3 (part 1)**: Implemented pandas + SQLite storage backend
  - Created `BenchmarkDB` class for persistent result storage
  - Schema: 15 columns including timestamp, gpu_info, parameters (JSON), metrics
  - Methods: `save_result()`, `query()`, `get_sweep_data()`, `export_csv/json()`, `stats()`
  - Flexible querying with filters (benchmark, gpu_name, problem_size, etc.)
  - Aggregation support for parameter sweeps (mean, std, count)
  - **Architecture Decision**: Pandas + SQLite (lightweight, fast) vs SQLAlchemy+Alembic
  - Result: 0.5-1 session effort, perfect for single-user/small-team workflow

#### Phase 7: Visualization Module ✅ (Oct 16, 2025)
- [x] **TODO 3 (part 2)**: Implemented comprehensive visualization suite
  - **Core Functions**:
    * `plot_sweep()` - Parameter sweep line plots with error bars, grouping, log scales
    * `plot_comparison()` - Bar charts for metric comparison across configurations
    * `plot_heatmap()` - 2D heatmap for dual-parameter sweeps
  - **KB/MB Formatting** (User request):
    * `format_data_size_axis()` - Smart formatter: <1024 KB, ≥1024 MB
    * Matches gpu-benches style: "data volume per SM/CU"
    * Supports custom element sizes (float32=4B, float64=8B)
  - **Multi-GPU Comparison** (User request):
    * `plot_gpu_comparison_sweep()` - Convenience function for cross-GPU plots
    * Database schema supports multi-GPU (gpu_name, gpu_arch columns)
    * `plot_sweep(group_by='gpu_name')` for custom grouping
  - **Styling**:
    * Ported GPU color palette from gpu-benches (9 colors)
    * BMH matplotlib style with white background
    * Export support: PNG, SVG, PDF (300 DPI)
    * Log/log2 scale support, grid, tight layout

**Current Storage Schema**:
```python
# Database columns
id, timestamp, gpu_name, gpu_arch, benchmark_type,
problem_size, block_size, iterations, parameters (JSON),
primary_metric, metric_name, spread_percent, execution_time_ms,
rocm_version, hostname
```

**Usage Examples**:
```python
# Storage
from rocmGPUBenches import BenchmarkDB, create_cache_benchmark_runner

db = BenchmarkDB('results.db')
runner = create_cache_benchmark_runner()
gpu_info = {'name': runner.get_device_name(), 'arch': 'gfx942'}

result = runner.run('cache', problem_size=256)
db.save_result('cache', result, {'problem_size': 256}, gpu_info)

# Query
df = db.query(benchmark='cache', problem_size=256)
df_sweep = db.get_sweep_data('cache', 'problem_size')

# Visualization - Single GPU
from rocmGPUBenches import plot_sweep, format_data_size_axis

plot_sweep(df_sweep, x='problem_size', y='bandwidth_gbs_mean',
          yerr='bandwidth_gbs_std', xscale='log2')
format_data_size_axis(plt.gca())  # Add KB/MB labels

# Visualization - Multi-GPU Comparison
from rocmGPUBenches import plot_gpu_comparison_sweep

df_all = db.query(benchmark='cache')  # All GPUs
plot_gpu_comparison_sweep(df_all, xscale='log2',
                         title='Cache Hierarchy: MI325X vs MI300X')
```

**Module Structure**:
```
src/rocmGPUBenches/
 storage/
   ├── __init__.py
   └── benchmark_db.py          # BenchmarkDB class (300+ lines)
 visualization/
 __init__.py   ├
   └── plotter.py               # All plotting functions (450+ lines)
```

**Commits (feature/visualization branch)**:
- `1255fd2`: feat: Add storage module with pandas + SQLite backend
- `fcbc21a`: feat: Add visualization module with plotting functions
- `a8acdf2`: feat: Add KB/MB formatting and multi-GPU comparison

**Test Results**:
- ✅ Storage: 6-point cache sweep saved and queried successfully
- ✅ Visualization: Line plots, bar charts, KB/MB formatting all working
- ✅ Multi-GPU: Architecture ready (single GPU tested, multi-GPU workflow validated)
- ✅ Export: CSV, PNG files generated correctly

