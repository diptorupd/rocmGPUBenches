#include "hip/hip_runtime.h"
#include "../MeasurementSeries.hpp"
#include "../dtime.hpp"
#include "../gpu-error.h"
#include "../gpu-metrics/gpu-metrics.hpp"
#include <iomanip>
#include <iostream>

using namespace std;

using dtype = double;
dtype *dA, *dB;

__global__ void initKernel(dtype *A, size_t N) {
  size_t tidx = blockDim.x * blockIdx.x + threadIdx.x;
  for (int idx = tidx; idx < N; idx += blockDim.x * gridDim.x) {
    A[idx] = dtype(1.1);
  }
}

template <int N, int BLOCKSIZE>
__global__ void sumKernel(dtype *__restrict__ A, const dtype *__restrict__ B,
                          int blockRun) {
  dtype localSum = dtype(0);

  for (int i = 0; i < N / 2; i++) {
    int idx =
        (blockDim.x * blockRun * i + (blockIdx.x % blockRun) * BLOCKSIZE) * 2 +
        threadIdx.x;
    localSum += B[idx] * B[idx + BLOCKSIZE];
  }

  localSum *= (dtype)1.3;
  if (threadIdx.x > 1233 || localSum == (dtype)23.12)
    A[threadIdx.x] += localSum;
}
template <int N, int blockSize>
double callKernel(int blockCount, int blockRun) {
  sumKernel<N, blockSize><<<blockCount, blockSize>>>(dA, dB, blockRun);
  GPU_ERROR(hipPeekAtLastError());
  return 0.0;
}
template <int N> void measure(int blockRun) {

  const int blockSize = 1024;

  hipDeviceProp_t prop;
  int deviceId;
  GPU_ERROR(hipGetDevice(&deviceId));
  GPU_ERROR(hipGetDeviceProperties(&prop, deviceId));
  std::string deviceName = prop.name;
  int smCount = prop.multiProcessorCount;
  int maxActiveBlocks = 0;
  GPU_ERROR(hipOccupancyMaxActiveBlocksPerMultiprocessor(
      &maxActiveBlocks, sumKernel<N, blockSize>, blockSize, 0));

  int blockCount = 200000;

  // GPU_ERROR(hipDeviceSetCacheConfig(hipFuncCachePreferShared));

  MeasurementSeries time;
  MeasurementSeries dram_read;
  MeasurementSeries dram_write;
  MeasurementSeries L2_read;
  MeasurementSeries L2_write;

  GPU_ERROR(hipDeviceSynchronize());
  for (int i = 0; i < 11; i++) {
    const size_t bufferCount = blockRun * blockSize * N + i * 128;
    GPU_ERROR(hipMalloc(&dA, bufferCount * sizeof(dtype)));
    initKernel<<<52, 256>>>(dA, bufferCount);
    GPU_ERROR(hipMalloc(&dB, bufferCount * sizeof(dtype)));
    initKernel<<<52, 256>>>(dB, bufferCount);
    GPU_ERROR(hipDeviceSynchronize());

    double t1 = dtime();
    callKernel<N, blockSize>(blockCount, blockRun);
    GPU_ERROR(hipDeviceSynchronize());
    double t2 = dtime();
    time.add(t2 - t1);

    /* measureDRAMBytesStart();
     callKernel<N, blockSize>(blockCount, blockRun);
     auto metrics = measureDRAMBytesStop();
     dram_read.add(metrics[0]);
     dram_write.add(metrics[1]);

     measureL2BytesStart();
     callKernel<N, blockSize>(blockCount, blockRun);
     metrics = measureL2BytesStop();
     L2_read.add(metrics[0]);
     L2_write.add(metrics[1]);*/
    GPU_ERROR(hipFree(dA));
    GPU_ERROR(hipFree(dB));
  }

  double blockDV = N * blockSize * sizeof(dtype);

  double bw = blockDV * blockCount / time.minValue() / 1.0e9;
  cout << fixed << setprecision(0) << setw(10) << blockDV / 1024 << " kB" //
       << fixed << setprecision(0) << setw(10) << blockDV * blockRun / 1024
       << " kB"                                                           //
       << setprecision(0) << setw(10) << time.minValue() * 1000.0 << "ms" //
       << setprecision(1) << setw(10) << time.spread() * 100 << "%"       //
       << setw(10) << bw << " GB/s   "                                    //
       << setprecision(0) << setw(6)
       << dram_read.median() / time.minValue() / 1.0e9 << " GB/s " //
       << setprecision(0) << setw(6)
       << dram_write.median() / time.minValue() / 1.0e9 << " GB/s " //
       << setprecision(0) << setw(6)
       << L2_read.median() / time.minValue() / 1.0e9 << " GB/s " //
       << setprecision(0) << setw(6)
       << L2_write.median() / time.minValue() / 1.0e9 << " GB/s " << endl; //
}

size_t constexpr expSeries(size_t N) {
  size_t val = 20;
  for (size_t i = 0; i < N; i++) {
    val = val * 1.04 + 1;
  }
  return val;
}

int main(int argc, char **argv) {
  initMeasureMetric();
  cout << setw(13) << "data set"   //
       << setw(12) << "exec time"  //
       << setw(11) << "spread"     //
       << setw(15) << "Eff. bw\n"; //

  for (int i = 3; i < 10000; i += max(1.0, i * 0.1)) {
#ifdef __NVCC__
    measure<64>(i);
#else
    measure<64>(i);
#endif
  }
}
